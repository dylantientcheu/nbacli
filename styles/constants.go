package styles

import (
	"time"

	"github.com/charmbracelet/bubbles/spinner"
	"github.com/charmbracelet/lipgloss"
)

var EmphasisText = lipgloss.NewStyle().Bold(true)
var PrimaryText = lipgloss.NewStyle().Bold(true)
var SecondaryText = lipgloss.NewStyle().Foreground(lipgloss.Color("#808080"))

var LiveText = lipgloss.NewStyle().Background(lipgloss.AdaptiveColor{Light: "#ef2929", Dark: "#ef2929"}).Foreground(lipgloss.AdaptiveColor{Light: "#ffffff", Dark: "#ffffff"}).Bold(true)
var FinalText = lipgloss.NewStyle().Background(lipgloss.Color("#9356DF")).Foreground(lipgloss.Color("#ffffff"))

const (
	bullet   = "•"
	ellipsis = "…"
)

const (
	magentaDark = "200"
	yellowDark  = "214"
	blueDark    = "33"
	pinkDark    = "219"

	logoBgDark           = "#0f1429"
	headerBgDark         = "#2d3454"
	unselectedItemFgDark = "251"
	paginatorBgDark      = logoBgDark
	selectedPageFgDark   = unselectedItemFgDark
	unselectedPageFgDark = "239"

	magentaLight = magentaDark
	yellowLight  = "208"
	blueLight    = blueDark
	pinkLight    = pinkDark

	logoBgLight           = "252"
	headerBgLight         = "254"
	unselectedItemFgLight = "235"
	paginatorBgLight      = logoBgLight
	selectedPageFgLight   = unselectedItemFgLight
	unselectedPageFgLight = "247"
)

// Styles contains style definitions for this list component. By default, these
// values are generated by DefaultStyles.
type Styles struct {
	TitleBar     lipgloss.Style
	Title        lipgloss.Style
	Spinner      lipgloss.Style
	FilterPrompt lipgloss.Style
	FilterCursor lipgloss.Style

	// Default styling for matched characters in a filter. This can be
	// overridden by delegates.
	DefaultFilterCharacterMatch lipgloss.Style

	StatusBar             lipgloss.Style
	StatusEmpty           lipgloss.Style
	StatusBarActiveFilter lipgloss.Style
	StatusBarFilterCount  lipgloss.Style

	NoItems lipgloss.Style

	PaginationStyle lipgloss.Style
	HelpStyle       lipgloss.Style

	// Styled characters.
	ActivePaginationDot   lipgloss.Style
	InactivePaginationDot lipgloss.Style
	ArabicPagination      lipgloss.Style
	DividerDot            lipgloss.Style
}

// DefaultStyles returns a set of default style definitions for this list
// component.
func DefaultStyles() (s Styles) {
	verySubduedColor := lipgloss.AdaptiveColor{Light: "#DDDADA", Dark: "#3C3C3C"}
	subduedColor := lipgloss.AdaptiveColor{Light: "#9B9B9B", Dark: "#5C5C5C"}

	s.TitleBar = lipgloss.NewStyle().Padding(0, 0, 1, 2)

	// s.Title = lipgloss.NewStyle().
	//	Background(lipgloss.Color("62")).
	//	Foreground(lipgloss.Color("230")).
	//	Padding(0, 1)

	s.Spinner = lipgloss.NewStyle()
	// Foreground(lipgloss.Color("250")).
	// Background(lipgloss.Color("238")).
	// Faint(true)

	s.FilterPrompt = lipgloss.NewStyle().
		Foreground(lipgloss.AdaptiveColor{Light: "#04B575", Dark: "#ECFD65"})

	s.FilterCursor = lipgloss.NewStyle().
		Foreground(lipgloss.AdaptiveColor{Light: "#EE6FF8", Dark: "#EE6FF8"})

	s.DefaultFilterCharacterMatch = lipgloss.NewStyle().Underline(true)

	// s.StatusBar = lipgloss.NewStyle().
	//	Foreground(lipgloss.Color("16")).
	//	Background(lipgloss.Color("4"))

	s.StatusEmpty = lipgloss.NewStyle().Foreground(subduedColor)

	s.StatusBarActiveFilter = lipgloss.NewStyle().
		Foreground(lipgloss.AdaptiveColor{Light: "#1a1a1a", Dark: "#dddddd"})

	s.StatusBarFilterCount = lipgloss.NewStyle().Foreground(verySubduedColor)

	s.NoItems = lipgloss.NewStyle().
		Foreground(lipgloss.AdaptiveColor{Light: "#909090", Dark: "#626262"})

	s.ArabicPagination = lipgloss.NewStyle().Foreground(subduedColor)

	s.PaginationStyle = lipgloss.NewStyle().PaddingLeft(2) //nolint:gomnd

	s.HelpStyle = lipgloss.NewStyle().Padding(1, 0, 0, 2)

	/* s.ActivePaginationDot = lipgloss.NewStyle().
		Foreground(style.GetSelectedPageFg()).
		Background(style.GetPaginatorBg()).
		SetString(bullet)

	s.InactivePaginationDot = lipgloss.NewStyle().
		Foreground(style.GetUnselectedPageFg()).
		Background(style.GetPaginatorBg()).
		SetString(bullet) */

	s.DividerDot = lipgloss.NewStyle().
		Faint(true).
		SetString(" " + bullet + " ")

	return s
}

func GetSpinner() spinner.Spinner {
	normal := lipgloss.NewStyle().
		Foreground(lipgloss.AdaptiveColor{Light: selectedPageFgLight, Dark: selectedPageFgDark}).
		Background(lipgloss.AdaptiveColor{Light: unselectedPageFgLight, Dark: unselectedPageFgDark}).
		Faint(false)

	color := normal.Copy()

	magenta := lipgloss.AdaptiveColor{Light: magentaLight, Dark: magentaDark}
	yellow := lipgloss.AdaptiveColor{Light: yellowLight, Dark: yellowDark}
	blue := lipgloss.AdaptiveColor{Light: blueLight, Dark: blueDark}

	return spinner.Spinner{
		Frames: []string{
			normal.Render("fetching" + color.Foreground(magenta).Render(".") + color.Foreground(yellow).Render(".") + color.Foreground(blue).Render(".")),
			normal.Render("fetching   "),
			normal.Render("fetching" + color.Foreground(magenta).Render(".") + normal.Render("  ")),
			normal.Render("fetching" + color.Foreground(magenta).Render(".") + color.Foreground(yellow).Render(".") + normal.Render(" ")),
		},
		FPS: 1500 * time.Millisecond,
	}
}

func LiveStyle() string {
	return LiveText.Render(" LIVE ")
}

func FinalStyle() string {
	return FinalText.Render(" FINAL ")
}
